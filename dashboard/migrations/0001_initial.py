# Generated by Django 5.1.3 on 2025-01-14 00:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('class_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('bullet_points', models.JSONField(blank=True, help_text="Formato: ['punto 1', 'punto 2', ...]", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('course_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('level', models.CharField(blank=True, max_length=100, null=True)),
                ('bullet_points', models.JSONField(blank=True, help_text="Formato: ['punto 1', 'punto 2', ...]", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MediaModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('video', 'Video')], max_length=10)),
                ('file', models.FileField(upload_to='task_media/')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassContentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True or False'), ('fill_gaps', 'Fill in the Gaps'), ('word_bank', 'Word Bank'), ('drop_down_text', 'Drop Down Text'), ('ordering', 'Ordering'), ('sorting', 'Sorting'), ('category', 'Category'), ('matching', 'Matching'), ('flashcards', 'Flashcards'), ('table', 'Table'), ('accordion', 'Accordion'), ('tabs', 'Tabs'), ('button_stack', 'Button Stack'), ('process', 'Process'), ('timeline', 'Timeline'), ('multiple_choice_knowledge_check', 'Multiple Choice Knowledge Check'), ('true_false_knowledge_check', 'True or False Knowledge Check'), ('fill_gaps_knowledge_check', 'Fill in the Gaps Knowledge Check'), ('word_bank_knowledge_check', 'Word Bank Knowledge Check'), ('drop_down_text_knowledge_check', 'Drop Down Text Knowledge Check'), ('ordering_knowledge_check', 'Ordering Knowledge Check'), ('sorting_knowledge_check', 'Sorting Knowledge Check'), ('categories_knowledge_check', 'Categories Knowledge Check'), ('matching_knowledge_check', 'Matching Knowledge Check'), ('word_order_knowledge_check', 'Word Order Knowledge Check'), ('picture_matching_knowledge_check', 'Picture Matching Knowledge Check'), ('picture_labeling_knowledge_check', 'Picture Labeling Knowledge Check'), ('text_block', 'Text Block'), ('text_article', 'Text Article'), ('text_quote', 'Text Quote'), ('text_highlighted', 'Text Highlighted'), ('info_box', 'Info Box'), ('icon_list', 'Icon List'), ('image', 'Imagen'), ('video', 'Video'), ('audio', 'Audio'), ('video_embed', 'Video Embebido'), ('attachment', 'Archivo Adjunto'), ('ia_chat', 'IA Chat')], max_length=100)),
                ('tittle', models.CharField(blank=True, max_length=500, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('content_details', models.JSONField(blank=True, null=True)),
                ('multimedia', models.JSONField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, max_length=500, null=True, upload_to='content_images/')),
                ('video', models.FileField(blank=True, max_length=500, null=True, upload_to='content_videos/')),
                ('video_transcription', models.TextField(blank=True, null=True)),
                ('embed_video', models.URLField(blank=True, null=True)),
                ('audio', models.FileField(blank=True, max_length=500, null=True, upload_to='content_audios/')),
                ('audio_transcription', models.TextField(blank=True, null=True)),
                ('pdf', models.FileField(blank=True, max_length=500, null=True, upload_to='content_pdfs/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('stats', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='dashboard.classmodel')),
            ],
            options={
                'verbose_name': 'Contenido de Clase',
                'verbose_name_plural': 'Contenidos de Clase',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='classmodel',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='dashboard.coursemodel'),
        ),
        migrations.CreateModel(
            name='FormattedTextModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('content', models.TextField(help_text='Contenido con formato HTML/TipTap')),
                ('instructions', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formatted_texts', to='dashboard.classmodel')),
            ],
            options={
                'verbose_name': 'Texto Formateado',
                'verbose_name_plural': 'Textos Formateados',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='LayoutModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=300, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('cover', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('audio', models.FileField(blank=True, null=True, upload_to='class_audio/')),
                ('audio_script', models.TextField(blank=True, null=True)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='FillInTheGapsTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('text_with_gaps', models.TextField(help_text="Texto con espacios para completar. Usa '{gap}' para indicar los espacios.")),
                ('keywords', models.JSONField(help_text='Palabras claves en formato JSON, en el orden de aparición de los espacios.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fill_in_the_gaps_tasks', to='dashboard.classmodel')),
                ('media', models.ManyToManyField(blank=True, related_name='fill_in_the_gaps_tasks', to='dashboard.mediamodel')),
            ],
        ),
        migrations.CreateModel(
            name='CategoriesTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('categories', models.JSONField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories_tasks', to='dashboard.classmodel')),
                ('media', models.ManyToManyField(blank=True, related_name='categories_tasks', to='dashboard.mediamodel')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='MultimediaBlockAttachmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('link_attachment', models.URLField(blank=True, null=True)),
                ('text_attachment', models.TextField(blank=True, null=True)),
                ('file_attachment', models.FileField(blank=True, help_text='Archivo adjunto (pdf, txt, etc.)', null=True, upload_to='attachments/')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='multimedia_block_videos/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multimedia_block_attachments', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MultimediaBlockAudioModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('audio', models.FileField(blank=True, help_text='Archivo de audio', null=True, upload_to='multimedia_block_audios/')),
                ('script', models.TextField(blank=True, help_text='Transcripción de lo que se dice en el video', null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multimedia_block_audios', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MultimediaBlockVideoEmbedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('link_video', models.URLField(blank=True, null=True)),
                ('cover', models.ImageField(blank=True, null=True, upload_to='multimedia_block_videos/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multimedia_block_videos_embedded', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MultimediaBlockVideoModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('video', models.FileField(blank=True, help_text='Archivo de video', null=True, upload_to='multimedia_block_videos/')),
                ('script', models.TextField(blank=True, help_text='Transcripción de lo que se dice en el video', null=True)),
                ('cover', models.ImageField(blank=True, null=True, upload_to='multimedia_block_videos/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multimedia_block_videos_uploaded', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='MultipleChoiceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('script', models.TextField(blank=True, null=True)),
                ('question', models.JSONField()),
                ('cover', models.ImageField(blank=True, null=True, upload_to='cover_multiple_choice_tasks/')),
                ('audio', models.FileField(blank=True, null=True, upload_to='audio_multiple_choice_tasks/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('stats', models.BooleanField(default=False)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multiple_choice_tasks', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='OrderingTaskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('items', models.JSONField(help_text='Lista de elementos a ordenar en formato JSON.')),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordering_tasks', to='dashboard.classmodel')),
                ('media', models.ManyToManyField(blank=True, related_name='ordering_tasks', to='dashboard.mediamodel')),
            ],
        ),
        migrations.CreateModel(
            name='ScenarioModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='scenario_covers/')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('goals', models.JSONField(blank=True, null=True)),
                ('objectives', models.JSONField(blank=True, null=True)),
                ('student_information', models.JSONField(blank=True, null=True)),
                ('role_polly', models.CharField(max_length=200)),
                ('role_student', models.CharField(max_length=200)),
                ('conversation_starter', models.TextField()),
                ('vocabulary', models.JSONField(blank=True, null=True)),
                ('key_expressions', models.JSONField(blank=True, null=True)),
                ('end_conversation', models.TextField()),
                ('end_conversation_saying', models.TextField()),
                ('feedback', models.TextField()),
                ('scoring', models.JSONField(blank=True, null=True)),
                ('additional_info', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='StudentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentNoteModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('note_type', models.CharField(choices=[('vocabulary', 'Vocabulary'), ('grammar', 'Grammar'), ('expressions', 'Expressions'), ('general', 'General Note')], default='general', max_length=20)),
                ('tags', models.JSONField(blank=True, help_text='List of tags to categorize the note', null=True)),
                ('highlighted', models.BooleanField(default=False)),
                ('color', models.CharField(blank=True, help_text='HEX color code for the note', max_length=7, null=True)),
                ('related_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_notes', to='dashboard.classmodel')),
                ('related_content', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_notes', to='dashboard.classcontentmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='dashboard.studentmodel')),
            ],
            options={
                'verbose_name': 'Student Note',
                'verbose_name_plural': 'Student Notes',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TextBlockLayoutModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, help_text='Título del bloque de texto', max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('content', models.TextField(help_text='Contenido de texto')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_blocks', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='TrueOrFalseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(blank=True, max_length=200, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('questions', models.JSONField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Orden de aparición de la tarea.')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='true_or_false_tasks', to='dashboard.classmodel')),
                ('media', models.ManyToManyField(blank=True, related_name='true_or_false_tasks', to='dashboard.mediamodel')),
            ],
        ),
        migrations.CreateModel(
            name='VideoLayoutModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tittle', models.CharField(help_text='Título del video', max_length=200)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('video_file', models.FileField(blank=True, help_text='Archivo de video', null=True, upload_to='videos/')),
                ('script', models.TextField(blank=True, help_text='Transcripción de lo que se dice en el video', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='dashboard.classmodel')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProgressModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('score', models.FloatField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('last_attempt', models.DateTimeField(auto_now=True)),
                ('answers', models.JSONField(blank=True, null=True)),
                ('class_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.classcontentmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='dashboard.studentmodel')),
            ],
            options={
                'unique_together': {('student', 'class_content')},
            },
        ),
        migrations.CreateModel(
            name='VocabularyEntryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(help_text='Palabra o frase a aprender', max_length=200)),
                ('translation', models.CharField(help_text='Traducción a tu idioma nativo', max_length=200)),
                ('context', models.TextField(blank=True, help_text='Ejemplo de uso en contexto', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notas personales sobre el uso', null=True)),
                ('entry_type', models.CharField(choices=[('word', 'Palabra'), ('phrase', 'Frase'), ('expression', 'Expresión'), ('slang', 'Modismo'), ('idiom', 'Frase hecha')], default='word', max_length=20)),
                ('tags', models.JSONField(blank=True, help_text='Etiquetas para organizar el vocabulario', null=True)),
                ('category', models.CharField(blank=True, help_text='Categoría temática', max_length=100, null=True)),
                ('proficiency_level', models.IntegerField(choices=[(1, 'Principiante'), (2, 'Básico'), (3, 'Intermedio'), (4, 'Avanzado'), (5, 'Dominado')], default=1, help_text='Nivel de dominio actual')),
                ('times_practiced', models.PositiveIntegerField(default=0, help_text='Número de veces practicada')),
                ('last_practiced', models.DateTimeField(blank=True, null=True)),
                ('next_review', models.DateTimeField(blank=True, help_text='Fecha sugerida para próxima revisión', null=True)),
                ('audio_pronunciation', models.FileField(blank=True, help_text='Audio de pronunciación', null=True, upload_to='vocabulary_audio/')),
                ('image', models.ImageField(blank=True, help_text='Imagen relacionada', null=True, upload_to='vocabulary_images/')),
                ('is_favorite', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vocabulary_entries', to='dashboard.classmodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabulary', to='dashboard.studentmodel')),
            ],
            options={
                'verbose_name': 'Entrada de Vocabulario',
                'verbose_name_plural': 'Entradas de Vocabulario',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['student', 'term'], name='dashboard_v_student_660c98_idx'), models.Index(fields=['proficiency_level'], name='dashboard_v_profici_80a227_idx'), models.Index(fields=['category'], name='dashboard_v_categor_4b73b7_idx')],
            },
        ),
    ]
